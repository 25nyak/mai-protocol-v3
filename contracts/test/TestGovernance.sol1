// SPDX-License-Identifier: UNLICENSED

pragma solidity >=0.7.4;
pragma experimental ABIEncoderV2;

import "../Governance.sol";

contract TestGovernance is Governance {
    function setGovernor(address governor) public {
        _governor = governor;
    }

    function setOperator(address operator) public {
        _liquidityPool.operator = operator;
    }

    function initializeParameters(
        int256[7] calldata coreParams,
        int256[5] calldata riskParams,
        int256[5] calldata minRiskParamValues,
        int256[5] calldata maxRiskParamValues
    ) public {
        _initializeParameters(coreParams, riskParams, minRiskParamValues, maxRiskParamValues);
    }

    function initialMarginRate() public view returns (int256) {
        return _liquidityPool.initialMarginRate;
    }

    function maintenanceMarginRate() public view returns (int256) {
        return _liquidityPool.maintenanceMarginRate;
    }

    function operatorFeeRate() public view returns (int256) {
        return _liquidityPool.operatorFeeRate;
    }

    function vaultFeeRate() public view returns (int256) {
        return _liquidityPool.vaultFeeRate;
    }

    function lpFeeRate() public view returns (int256) {
        return _liquidityPool.lpFeeRate;
    }

    function referrerRebateRate() public view returns (int256) {
        return _liquidityPool.referrerRebateRate;
    }

    function liquidationPenaltyRate() public view returns (int256) {
        return _liquidityPool.liquidationPenaltyRate;
    }

    function keeperGasReward() public view returns (int256) {
        return _liquidityPool.keeperGasReward;
    }

    function halfSpreadRate() public view returns (int256) {
        return _liquidityPool.halfSpreadRate.value;
    }

    function beta1() public view returns (int256) {
        return _liquidityPool.beta1.value;
    }

    function beta2() public view returns (int256) {
        return _liquidityPool.beta2.value;
    }

    function fundingRateLimit() public view returns (int256) {
        return _liquidityPool.fundingRateLimit.value;
    }

    function targetLeverage() public view returns (int256) {
        return _liquidityPool.targetLeverage.value;
    }
}
